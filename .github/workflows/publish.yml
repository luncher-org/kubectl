name: Publish Images
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
    paths:
      - 'versions.txt'
      - '.github/workflows/*'
      - 'package/Dockerfile'

env:
  IMAGE_REPO: ${{ github.repository }}

jobs:
  validate-versions:
    name: "Validate versions.txt"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: scripts/check-versions.sh
  image-prebuild:
    needs:
      - validate-versions
    name: Identify new versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.new-versions.outputs.value }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Find existing images
        id: existing-version
        run: |
          VALUES=$(skopeo list-tags docker://${IMAGE_REPO} |jq '.Tags | join(" ")')
          echo "EXISTING_VERSIONS=${VALUES}" >> "$GITHUB_OUTPUT"
      - name: Filter new versions
        id: new-versions
        env:
          EXISTING_VERSIONS: ${{ steps.existing-version.outputs.EXISTING_VERSIONS }}
        run: |
          touch new-versions.txt
          ./scripts/new-versions.sh
          JSON=$(jq -R . new-versions.txt | jq -sc .)
          NEW_COUNT=$(wc -l new-versions.txt |awk '{print $1}')
          echo "value=${JSON}"
          echo "value=${JSON}" >> "$GITHUB_OUTPUT"
          echo "Found ${NEW_COUNT} new kubectl versions to build" >> $GITHUB_STEP_SUMMARY
  image-prebuild-validate:
    permissions:
      contents: read
      id-token: write # this is important, it's how we authenticate with Vault
    needs:
      - image-prebuild
    name: Prebuild and Validate kubectl versions
    runs-on: ubuntu-latest
    if: ${{ needs.image-prebuild.outputs.matrix && needs.image-prebuild.outputs.matrix != '[]' }}
    strategy:
      matrix:
        version: ${{fromJSON(needs.image-prebuild.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
      - name: "Read some Secrets"
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Build image
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        id: build-image
        with:
          context: .
          file: package/Dockerfile
          platforms: "linux/amd64"
          push: false
          load: true
          tags: ${{ env.IMAGE_REPO }}:${{ matrix.version }}
          build-args: |
            KUBERNETES_RELEASE=${{ matrix.version }}
      - name: Unit test image
        run: scripts/unit-test-image.sh ${{ matrix.version }}
        env:
          REPO: ${{ env.IMAGE_REPO }}
  image-build-push:
    permissions:
      contents: read
      id-token: write # this is important, it's how we authenticate with Vault
    needs:
      - image-prebuild
      - image-prebuild-validate
    name: Build and push Image(s)
    runs-on: ubuntu-latest
    if: ${{ needs.image-prebuild.outputs.matrix && needs.image-prebuild.outputs.matrix != '[]' }}
    strategy:
      matrix:
        version: ${{fromJSON(needs.image-prebuild.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # v3.9.0
      - name: "Read some Secrets"
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.IMAGE_REPO }}
      - name: Build and push
        uses: docker/build-push-action@0adf9959216b96bec444f325f1e493d4aa344497 # v6.14.0
        id: build-push
        with:
          context: .
          file: package/Dockerfile
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ matrix.version }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            KUBERNETES_RELEASE=${{ matrix.version }}
      - name: Get CPU Arch hashes
        run: |
          docker manifest inspect ${{ env.IMAGE_REPO }}:${{ matrix.version }} | jq --raw-output '.manifests[]
            | select(.platform.architecture | IN("amd64", "arm64"))
            | "IMAGE_\(.platform.architecture | ascii_upcase)=\(.digest)"' >> "$GITHUB_ENV"
      - name: Tag CPU Arch Images
        run: |
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }}  ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }}  ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64